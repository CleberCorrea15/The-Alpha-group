# -*- coding: utf-8 -*-
"""grupoalpha14.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Cl2F0bvACiRnydl6Cx5-FVQwri8kx_Eu
"""
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation



fig, ax = plt.subplots(figsize=(7, 8))

num_layers = 6         # número de lemniscatas
a_base = 0.8           # valor base do raio (altura no eixo μ)
delta_a = 0.25         # incremento por camada

s = np.linspace(0, 2 * np.pi, 800)

def lemniscata_param(s_vals, a):
    x_o = a * np.cos(s_vals) / (1 + np.sin(s_vals)**2)
    y_o = a * np.sin(s_vals) * np.cos(s_vals) / (1 + np.sin(s_vals)**2)
    x_r = -y_o
    y_r = x_o
    return x_r, y_r

s1 = s[s <= np.pi]
s2 = s[s > np.pi]

# Eixo μ (vetor canônico)
max_mu = a_base + (num_layers - 1) * delta_a
line_mu, = ax.plot([0, 0], [-1.2 * max_mu, 1.2 * max_mu], 'k--', lw=3, alpha=0.8, label='$\\mu$ (canonical vector)')

lines_real = []
lines_complex = []
annotations = []

for i in range(num_layers):
    a = a_base + i * delta_a

    # Linhas das lemniscatas (duas metades por camada)
    real_line, = ax.plot([], [], color='blue', lw=2, alpha=0.7, label='Complex blade' if i == 0 else None)
    complex_line, = ax.plot([], [], color='red', lw=2, alpha=0.85, label='Real blade' if i == 0 else None)

    lines_real.append(real_line)
    lines_complex.append(complex_line)

    # Anotação da parte real (acima)
    y_pos = a
    ann_real = ax.annotate(
        f'$\\mu_{{{i+1}}} = {y_pos:.2f}\\,\\mu$',
        xy=(0, y_pos),
        xytext=(0.15, y_pos),
        textcoords='data',
        fontsize=12,
        color='black',
        ha='left',
        va='center'
    )
    annotations.append(ann_real)

    # Anotação da parte imaginária (abaixo)
    y_neg = -a
    ann_imag = ax.annotate(
        f'$i\\mu_{{{i+1}}} = {a:.2f}\\,i\\mu$',
        xy=(0, y_neg),
        xytext=(0.15, y_neg),
        textcoords='data',
        fontsize=12,
        color='purple',
        ha='left',
        va='center'
    )
    annotations.append(ann_imag)

# Configuração do gráfico
ax.set_xlim(-2, 2)
ax.set_ylim(-1.5 * max_mu, 1.5 * max_mu)
ax.set_aspect('equal')
ax.set_xlabel('X')
ax.set_ylabel('$\\mu$ (4ª dimension)')
ax.grid(True)
ax.legend(loc='upper right')

def rotate_points(x, y, angle):
    x_rot = x * np.cos(angle) - y * np.sin(angle)
    y_rot = x * np.sin(angle) + y * np.cos(angle)
    return x_rot, y_rot

def update(frame):
    for i in range(num_layers):
        a = a_base + i * delta_a

        sign = (-1) ** i
        ang_real = sign * frame * 2 * np.pi / 100
        ang_complex = -sign * frame * 2 * np.pi / 100

        x1, y1 = lemniscata_param(s1, a)
        x2, y2 = lemniscata_param(s2, a)

        xr1, yr1 = rotate_points(x1, y1, ang_real)
        xr2, yr2 = rotate_points(x2, y2, ang_complex)

        # Ambos os ramos giram centrados na origem
        lines_real[i].set_data(xr1, yr1)
        lines_complex[i].set_data(xr2, yr2)

    return lines_real + lines_complex + [line_mu] + annotations

ani = FuncAnimation(fig, update, frames=101, interval=50, blit=True)

plt.show()

