import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

# === Dados simulados (substituido pelos reais do seu experimento) ===
betti_data = {
    "S^3": {
        "H0": [i for i in range(101)],
        "H1": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,3,3,4,5,6,7,7,8,8,9,9,8,8,8,10,11,11,12,12,13,13,13,12,12,12,12,12,12,13,13,13,13,13,16,17,17,17,16,17,19,19,19,19,20,21,22,23,23,23,23,24,25,25,25,27,27,26,26,25,25,27,28,30,30,31,32,32,33,33,34,34,36,36,36,36,36,36,37,40,40,40,40,40,40],
        "H2": [0]*53 + [1]*15 + [0]*32 + [1,1]
    },
    "S^4": {
        "H0": [i for i in range(101)],
        "H1": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,2,2,2,2,3,3,3,3,5,5,6,7,7,8,7,9,9,10,10,10,10,10,10,10,10,12,14,16,15,15,17,18,19,18,18,19,20,21,21,21,22,23,23,23,24,23,25,26,25,25,27,28,28,29,31,31,30,30,31,32,32,33,33,34,34,34,35,36,38,40,41,43,44,44,44,43,43,45,44,44,44],
        "H2": [0]*63 + [1]*18 + [2]*6 + [3,4,4,4,4,4]
    },
    "S^5": {
        "H0": [0, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100],
        "H1": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 4, 4, 5, 5, 7, 7, 9, 10, 11, 10, 11, 11, 11, 12, 11, 13, 13, 14, 14, 15, 15, 14, 15, 16, 16, 17, 17, 19, 22, 21, 21, 24, 24, 23, 23, 23, 23, 22, 23, 23, 23, 25, 27, 27, 28, 28, 29, 30, 33, 33, 33, 33, 34, 34, 33, 33, 32, 34, 34, 35, 35, 35, 37, 37, 38, 39, 40, 40, 42, 42, 45, 47, 47, 48, 50],
        "H2": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 5, 5, 5, 6, 6, 7, 7, 7, 7, 7, 7, 7, 9, 9, 10, 10, 12, 12, 13, 13, 13, 14, 14, 14]
     },
    "S^6": {
        "H0": [0, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100],
        "H1": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 3, 3, 3, 3, 4, 4, 6, 6, 6, 7, 9, 10, 10, 10, 11, 11, 12, 12, 11, 12, 12, 12, 12, 12, 13, 14, 15, 16, 18, 19, 19, 20, 21, 21, 21, 22, 21, 24, 24, 24, 24, 24, 24, 24, 25, 27, 28, 29, 30, 31, 31, 32, 33, 34, 35, 35, 36, 35, 35, 36, 35, 35, 35, 36, 38, 39, 39, 39, 40, 42, 42, 43, 43, 43, 43, 44, 44, 44, 44, 44, 44],
        "H2": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 3, 3, 4, 4, 5, 5, 5, 4, 5, 6, 6, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 11, 11, 11, 10, 10, 10, 10, 8, 9, 9, 8, 9, 10, 10, 10, 9]
    },
    "S^7": {
        "H0": [0, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100],
        "H1": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 5, 7, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 11, 11, 12, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 17, 19, 19, 19, 20, 21, 21, 21, 21, 21, 23, 24, 25, 25, 25, 26, 27, 27, 28, 29, 30, 31, 32, 31, 32, 32, 32, 32, 34, 36, 37, 37, 37, 38, 39, 39, 39, 39, 40, 42, 43, 43, 43, 43, 41, 41, 41, 40, 40, 40],
        "H2": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 4, 5, 5, 5, 5, 5, 7, 8, 8, 10, 11, 11, 11, 11, 11, 12, 12, 10, 10, 10, 10, 10, 10]
    }

    }



# Número de blocos usados em cada simulação (ajuste conforme seu setup)
blocks = [4, 8, 12, 16, 20, 24, 28, 32, 36]

# === Normalizar: aplicar o mesmo denominador (último número de blocos) em todo vetor ===
results = {}
for sphere, data in betti_data.items():
    normed = {}
    for hk, values in data.items():
        normed[hk] = [v/blocks[-1] for v in values]  # divide todo vetor pelo último bloco
    results[sphere] = normed

# === Exemplo de tabela (apenas primeiros 10 valores) ===
for sphere, normed in results.items():
    print(f"\n{sphere} (normalizado por {blocks[-1]} blocos):")
    df = pd.DataFrame({hk: vals[:10] for hk, vals in normed.items()})
    print(df)

# === Plot comparativo ===
fig, axes = plt.subplots(1, 3, figsize=(15, 5), sharex=True)

for i, hk in enumerate(["H0", "H1", "H2"]):
    ax = axes[i]
    for sphere, normed in results.items():
        ax.plot(range(len(normed[hk])), normed[hk], marker="o", label=sphere)
    ax.set_title(f"{hk} normalized")
    ax.set_xlabel("Iteration / step")
    ax.set_ylabel(f"{hk}/blocks")
    ax.legend()

plt.suptitle("Relative growth of Betti numbers (normalized)", fontsize=14)
plt.tight_layout()
plt.show()
